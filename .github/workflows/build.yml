name: Build AirPlay 2 Lite for OpenWRT

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - target: mips_24kc
            arch: mips
            subtarget: mt7628
            sdk_url: "https://downloads.openwrt.org/snapshots/targets/ramips/mt7628/openwrt-sdk-ramips-mt7628_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
            sdk_dir: "openwrt-sdk-ramips-mt7628_gcc-12.3.0_musl.Linux-x86_64"
          - target: mipsel_24kc
            arch: mipsel
            subtarget: mt7628
            sdk_url: "https://downloads.openwrt.org/snapshots/targets/ramips/mt7628/openwrt-sdk-ramips-mt7628_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
            sdk_dir: "openwrt-sdk-ramips-mt7628_gcc-12.3.0_musl.Linux-x86_64"
          - target: arm_cortex-a7_neon-vfpv4
            arch: arm
            subtarget: cortex-a7
            sdk_url: "https://downloads.openwrt.org/snapshots/targets/armvirt/64/openwrt-sdk-armvirt-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
            sdk_dir: "openwrt-sdk-armvirt-64_gcc-12.3.0_musl.Linux-x86_64"
          - target: aarch64_cortex-a72
            arch: aarch64
            subtarget: cortex-a72
            sdk_url: "https://downloads.openwrt.org/snapshots/targets/armvirt/64/openwrt-sdk-armvirt-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
            sdk_dir: "openwrt-sdk-armvirt-64_gcc-12.3.0_musl.Linux-x86_64"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify SDK URL
      run: |
        echo "Verifying SDK URL accessibility..."
        echo "Target: ${{ matrix.target }}"
        echo "SDK URL: ${{ matrix.sdk_url }}"
        
        # Test URL accessibility
        if curl -I --connect-timeout 10 "${{ matrix.sdk_url }}" > /dev/null 2>&1; then
          echo "✅ SDK URL is accessible"
        else
          echo "❌ SDK URL is not accessible"
          echo "This may indicate:"
          echo "1. The URL is incorrect"
          echo "2. The OpenWRT release is no longer available"
          echo "3. Network connectivity issues"
          exit 1
        fi

    - name: Setup OpenWRT SDK
      run: |
        echo "Downloading SDK for ${{ matrix.target }}..."
        echo "SDK URL: ${{ matrix.sdk_url }}"
        wget "${{ matrix.sdk_url }}"
        if [ $? -ne 0 ]; then
          echo "ERROR: Failed to download SDK from ${{ matrix.sdk_url }}"
          echo "Please check if the URL is correct and accessible"
          exit 1
        fi
        
        echo "Extracting SDK archive..."
        tar -xf "$(basename ${{ matrix.sdk_url }})"
        if [ $? -ne 0 ]; then
          echo "ERROR: Failed to extract SDK archive"
          echo "Archive file: $(basename ${{ matrix.sdk_url }})"
          ls -la "$(basename ${{ matrix.sdk_url }})"
          exit 1
        fi
        
        echo "Moving SDK directory..."
        mv "${{ matrix.sdk_dir }}" openwrt-sdk
        if [ $? -ne 0 ]; then
          echo "ERROR: Failed to move extracted SDK directory"
          echo "Expected directory: ${{ matrix.sdk_dir }}"
          echo "Available directories:"
          ls -la
          exit 1
        fi
        
        echo "SDK setup completed successfully"
        echo "SDK_DIR=openwrt-sdk" >> $GITHUB_ENV

    - name: Setup build environment
      run: |
        cd openwrt-sdk
        echo "src-link airplay2-lite $GITHUB_WORKSPACE" >> feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # Verify package structure
        echo "Package structure:"
        ls -la package/airplay2-lite/
        echo "Source files:"
        ls -la package/airplay2-lite/src/

    - name: Configure build
      run: |
        cd openwrt-sdk
        make defconfig
        echo "CONFIG_PACKAGE_airplay2-lite=y" >> .config
        echo "CONFIG_PACKAGE_libopenssl=y" >> .config
        echo "CONFIG_PACKAGE_libavahi-client=y" >> .config
        echo "CONFIG_PACKAGE_libavahi-common=y" >> .config
        echo "CONFIG_PACKAGE_libdaemon=y" >> .config
        echo "CONFIG_PACKAGE_alsa-lib=y" >> .config
        make defconfig

    - name: Debug build environment
      run: |
        cd openwrt-sdk
        echo "Build environment info:"
        echo "Target: ${{ matrix.target }}"
        echo "Architecture: ${{ matrix.arch }}"
        echo "Subtarget: ${{ matrix.subtarget }}"
        echo "Package directory structure:"
        find . -name "*airplay*" -type f
        echo "CMakeLists.txt location:"
        find . -name "CMakeLists.txt" -type f
        echo "Source files:"
        find . -name "*.c" -path "*/airplay2-lite/*" | head -10
        echo "Header files:"
        find . -name "*.h" -path "*/airplay2-lite/*" | head -10

    - name: Build package
      run: |
        cd openwrt-sdk
        make package/airplay2-lite/compile V=s

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: airplay2-lite-${{ matrix.target }}
        path: openwrt-sdk/bin/packages/*/base/airplay2-lite_*.ipk
        retention-days: 30
      if: always()  # Upload even if build fails for debugging

  create-release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.ipk" -exec cp {} release-assets/ \;
        
        # Create a combined package for easy installation
        cd release-assets
        tar -czf airplay2-lite-all-architectures.tar.gz *.ipk

    - name: Upload to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release-assets/airplay2-lite-all-architectures.tar.gz
        asset_name: airplay2-lite-all-architectures.tar.gz
        asset_content_type: application/gzip
